/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/crowbar/complex.ycp
 * Package:	Configuration of crowbar
 * Summary:	Dialogs definitions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id: complex.ycp 65771 2011-09-19 07:37:30Z visnov $
 */

{

textdomain "crowbar";

import "Label";
import "Popup";
import "Wizard";
import "UIHelper";
import "Confirm";
import "Crowbar";


include "crowbar/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return Crowbar::Modified();
}

boolean ReallyAbort() {
    return !Crowbar::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
//    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = Crowbar::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    boolean ret = Crowbar::Write();
    return ret ? `next : `abort;
}

/**
 * Overview dialog
 * @return dialog result
 */
any OverviewDialog() {

    // Crowbar overview dialog caption
    string caption = _("Crowbar Configuration Overview");

    list overview = [];

    map<string,map> networks    = Crowbar::networks;
    y2internal ("networks: %1", networks);

    list<term> network_names  = maplist (string name, map n, networks, {
      return `item (`id (name), name, name == "admin");
    });

    term build_ui_for_network (string name) {

      map network       = networks[name]:$[];
      return `VBox (
        `TextEntry (`id ("conduit"), _("Conduit"), network["conduit"]:""),
        `TextEntry (`id ("subnet"), _("Subnet"), network["subnet"]:""),
        `TextEntry (`id ("netmask"), _("Netmask"), network["netmask"]:""),
        `TextEntry (`id ("broadcast"), _("Broadcast"), network["broadcast"]:""),
        `VSpacing (0.5),
        `Left (`CheckBox (`id ("add_bridge"), _("Add Bridge"), network["add_bridge"]:false))
      );
    }

    term contents       = `HBox (`HSpacing (), `VBox (
      `VSpacing (),
      `Left (
        `ComboBox (`id (`networks), `opt (`notify), _("Networks"), network_names)
      ),
      `ReplacePoint (`id (`rp_network), build_ui_for_network ("admin")),
      /*
      `HBox (
        `PushButton (`id (`add_button), `opt (`key_F3), "Some button")
      ),
      */
      `VSpacing ()
    ), `HSpacing ());

    Wizard::SetContentsButtons(caption, contents, HELPS["overview"]:"",
        Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	if (ret == `abort || ret == `cancel) {
	    if (ReallyAbort()) break;
	    else continue;
	}
        else if (ret == `networks) {
            UI::ReplaceWidget (`id (`rp_network),
              build_ui_for_network ((string) UI::QueryWidget (`id (`networks), `Value))
            );
        }
        else if (ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
