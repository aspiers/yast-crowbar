/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/crowbar/complex.ycp
 * Package:	Configuration of crowbar
 * Summary:	Dialogs definitions
 * Authors:     Jiri Suchomel <jsuchome@suse.cz>,
 *              Michal Filka <mfilka@suse.cz>
 *
 * $Id: complex.ycp 65771 2011-09-19 07:37:30Z visnov $
 */

{

textdomain "crowbar";

import "Confirm";
import "Crowbar";
import "CWM";
import "CWMTab";
import "Label";
import "Popup";
import "Stage";
import "Wizard";
import "IP";

include "crowbar/helps.ycp";

boolean ReallyAbort() {
    return !Crowbar::Modified() || Popup::ReallyAbort(true);
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
//    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = Crowbar::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    boolean ret = Crowbar::Write();
    return ret ? `next : `abort;
}


    // local copy of network settings
    map<string,map> networks    = $[];

    // local copy of user settings
    map<string,map> users       = $[];

    string current_network      = "admin";

  define void InitPassword (string id) {
    UI::ChangeWidget (`id (id), `Value, users["crowbar","password"]:"");
  }

  define void StorePassword (string key, map event) {
    users["crowbar","password"] = UI::QueryWidget (`id(key), `Value);
  }

  define symbol HandlePassword (string key, map event) {
    if (event["ID"]:nil == `next) StorePassword (key, event);
    return nil;
  }

  /**
   * Validation function for widgets with time values
   */
  define boolean ValidatePassword (string key, map event) {
    if (UI::QueryWidget (`id("password"), `Value) !=
        UI::QueryWidget (`id("repeat_password"), `Value))
    {
      // error popup
      Popup::Error(_("The passwords do not match.
Try again."));
      UI::SetFocus (`id(key));
      return false;
    }
    return true;
  }

  /*
   * Returns current subnet as filled in dialog
   */
  define string GetSubnet()
  {
        return (string) UI::QueryWidget( `id( "subnet"), `Value);
  }

  /*
   * Returns current netmask as filled in dialog
   */
  define string GetNetmask()
  {
        return (string) UI::QueryWidget( `id( "netmask"), `Value);
  }

  /*
   * Returns broadcast address. Based on current netmask and subnet
   */
  define string GetBroadcast()
  {
      return IP::ComputeBroadcast( GetSubnet(), GetNetmask());
  }

  define term CreateItem( string name)
  {
      return `item (`id (name),
        name,
        networks[name,"subnet"]:"",
        networks[name,"netmask"]:"",
        // table entry (VLAN status)
        networks[name,"use_vlan"]:false ? sformat ("%1", networks[name,"vlan"]:0) : _("disabled")
      );
  }

  define list<term> CreateItemList()
  {
      return maplist (string name, map n, networks, {
          return CreateItem( name);
      });
  }
  /**
   * universal widget: initialize the string value of widget @param
   */
  define void InitNetwork (string id) {
    if( id == "broadcast")
    {
        UI::ChangeWidget (`id (id), `Value, GetBroadcast());
        return;
    }

    UI::ChangeWidget (`id (id), `Value, networks[current_network,id]:"");
  }

  /**
   * universal widget: initialize the integer value of widget @param
   */
  define void InitInteger (string id) {

    UI::ChangeWidget (`id (id), `Value, networks[current_network,id]:0);
    if (id == "vlan")
    {
        UI::ChangeWidget (`id (id), `Enabled, networks[current_network,"use_vlan"]:false == true);
    }
  }

  /**
   * initialize the value of table
   */
  define void InitNetworkSelect (string id) {
    UI::ChangeWidget (`id ( id), `Items, CreateItemList());
    UI::ChangeWidget (`id(id), `CurrentItem, current_network);
  }

  /**
   * store the string value of given widget
   */
  define void StoreNetwork (string key, map event) {
    if (key == "router")
    {
      // do not save empty router values to json
      if (UI::QueryWidget (`id(key), `Value) == "")
        return;
    }
    networks[current_network,key]      = UI::QueryWidget (`id(key), `Value);
  }

  /**
   * Validate entered network values
   */
  define boolean ValidateNetwork( string key, map event)
  {
      boolean ret = true;
      string subnet = GetSubnet();
      string netmask = GetNetmask();
      string router = (string) UI::QueryWidget (`id ("router"), `Value);

      ret = (key != "netmask") || IP::Check (netmask);
      if (!ret)
      {
          // error popup
          Popup::Error (sformat (_("The netmask is invalid.\n%1"), IP::Valid4 ()));
          return false;
      }

      ret = (key != "subnet") || IP::Check (subnet);
      if (!ret)
      {
          // error popup
          Popup::Error (sformat (_("The IP address is invalid.\n%1"), IP::Valid4 ()));
          return false;
      }
      ret = (key != "router") || router == "" || subnet == IP::ComputeNetwork (router, netmask);
      if (!ret)
      {
          // error popup
          Popup::Error (_("The router address is not part of given network."));
          return false;
      }
      return ret;
  }

  /**
   * handler for general string-value widgets: store their value on exit/save
   */
  define symbol HandleNetwork (string key, map event) {

    if (key == "use_vlan" && event["ID"]:nil == "use_vlan")
    {
        UI::ChangeWidget (`id ("vlan"), `Enabled, UI::QueryWidget (`id(key), `Value) == true);
    }
    // store the value on exiting
    if (event["EventReason"]:"" == "ValueChanged")
    {
        if (ValidateNetwork (key, $[]))
        {
            UI::ChangeWidget( `id( "broadcast"), `Value, GetBroadcast());
            StoreNetwork( event[ "ID"]:"", event);

            InitNetworkSelect ("network_select");
        }
    }
    if (event["ID"]:nil == `next) StoreNetwork (key, event);
    return nil;
  }


  /**
   * universal widget: initialize the string value of widget @param
   */
  define void InitCheckBox (string id) {
    UI::ChangeWidget (`id (id), `Value, networks[current_network,id]:false);
  }

  /**
   * handler network selection table
   */
  define symbol HandleNetworkSelect (string key, map event) {

    string selected = (string) UI::QueryWidget (`id(key), `Value);
    if (selected != current_network)
    {
      foreach (string key, ["netmask", "subnet", "add_bridge", "use_vlan", "vlan", "broadcast", "router"], {
        StoreNetwork (key, $[]);
      });
      current_network   = selected;
      foreach (string key, ["netmask", "subnet", "broadcast", "router"], {
        InitNetwork (key);
      });
      InitCheckBox ("use_vlan");
      InitCheckBox ("add_bridge");
      InitInteger ("vlan");
    }
    return nil;
  }

  /**
   * handler for ranges button
   */
  symbol HandleRangesButton (string key, map event) {
    any ID	= event["ID"]:nil;
    if (ID != key)
      return nil;


    map<string,map> ranges      = networks[current_network,"ranges"]:$[];
    term ranges_term    = `VBox ();

    foreach (string name, map range, ranges, {

      term r = `Frame (name, `HBox (
        `InputField (`id (name + "_start"), `opt (`hstretch),
          // inputfield label
          _("Min IP Address"), range["start"]:""),
        `InputField (`id (name + "_end"), `opt (`hstretch),
          // inputfield label
          _("Max IP Address"), range["end"]:"")
      ));
      ranges_term       = add (ranges_term, r);
    });

    UI::OpenDialog (`opt (`decorated), `HBox (`HSpacing (1), `VBox(
      `VSpacing (0.5),
      `HSpacing (65),
      ranges_term,
      `VSpacing (0.5),
      `ButtonBox (
        `PushButton (`id(`ok), Label::OKButton()),
        `PushButton (`id(`cancel), Label::CancelButton())
      ),
      `VSpacing (0.5)), `HSpacing (1))
    );

    foreach (string name, map range, ranges, {
      UI::ChangeWidget (`id (name + "_start"),`ValidChars, IP::ValidChars4 + IP::ValidChars6);
      UI::ChangeWidget (`id (name + "_end"),`ValidChars, IP::ValidChars4 + IP::ValidChars6);
    });

    symbol ret = `not_next;
    while (true)
    {
	ret     = (symbol) UI::UserInput ();
        if (ret == `cancel)
        {
          break;
        }
        if (ret == `ok)
        {
          string widget         = "";
          foreach (string name, map range, ranges, {
            if (widget != "")
            {
              return;
            }
            foreach (string part, [ "start", "end" ], {
              string ip   = (string) UI::QueryWidget (`id (name + "_" + part), `Value);
              if (!IP::Check (ip))
              {
                Popup::Error (IP::Valid4 ());
                widget  = name + "_" + part;
              }
              ranges[name,part] = ip;
            });
            if (widget == "" &&
                IP::ToInteger (ranges[name,"start"]:"") > IP::ToInteger (ranges[name,"end"]:""))
            {
              // error message
              Popup::Message(_("The lowest address must be lower than the highest one."));
              widget  = name + "_end";
            }
          });
          if (widget == "")
          {
            networks[current_network,"ranges"]  = ranges;
            break;
          }
          else
          {
            ret = `not_next;
            UI::SetFocus (`id (widget));
            continue;
          }
        }
    }

    UI::CloseDialog ();
    return nil;
  }

map<string, map> widget_description	= $[
    "password" : $[
	"widget"	: `password,
	"opt"		: [ `hstretch ],
	// textentry label
	"label"		: _("Password for Crowbar Administrator"),
	// help text
	"help"		: _("<p>adminhelp</p>"),
	"init"		: InitPassword,
	"store"		: StorePassword,
	"handle"	: HandlePassword,
	"validate_type"	: `function,
	"validate_function"	: ValidatePassword,
    ],
    "repeat_password" : $[
	"widget"	: `password,
	"opt"		: [ `hstretch ],
	// textentry label
	"label"		: _("Repeat the Password"),
	"init"		: InitPassword,
    ],
    // ---------------- widgets for Network tab
    "network_select" : $[
        "widget"        : `custom,
        "custom_widget" :
          `VBox (
              `VWeight (2, `Table (`id( "network_select"),
                  `opt (`notify, `immediate, `hstretch),
                  // table header
                  `header (_("Network"), _("Subnet Address"), _("Network Mask"), _("VLAN"))
              ))
          ),
        "init"          : InitNetworkSelect,
        "handle"        : HandleNetworkSelect,
    ],
    "use_vlan" : $[
	"widget"	: `checkbox,
	// checkbox label
	"label"		: _("Use VLAN"),
	// help text
	"help"		: _("<p>use vlan</p>"),
	"init"		: InitCheckBox,
	"store"		: StoreNetwork,
	"handle"	: HandleNetwork,
        "opt"           : [ `notify ],
    ],
    "vlan" : $[
	"widget"	: `intfield,
	// textentry label
	"label"		: _("VLAN ID"),
	// help text
	"help"		: _("<p>vlan help</p>"),
	"init"		: InitInteger,
	"store"		: StoreNetwork,
	"handle"	: HandleNetwork,
	"opt"		: [ `hstretch ],
    ],
    "router" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("Router"),
        "validate_type" : `function,
        "validate_function": ValidateNetwork,
        "valid_chars"   : IP::ValidChars4 + IP::ValidChars6,
	// help text
	"help"		: _("<p>router help</p>"),
	"init"		: InitNetwork,
	"store"		: StoreNetwork,
	"handle"	: HandleNetwork,
        "opt"           : [ `notify ],
    ],
    "subnet" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("Subnet"),
        "handle_events" : [ "ValueChanged" ],
        "validate_type" : `function,
        "validate_function": ValidateNetwork,
        "valid_chars"   : IP::ValidChars4 + IP::ValidChars6,
	// help text
	"help"		: _("<p>subnet help</p>"),
	"init"		: InitNetwork,
	"store"		: StoreNetwork,
	"handle"	: HandleNetwork,
        "opt"           : [ `notify ],
    ],
    "netmask" : $[
	"widget"	: `textentry,
	// textentry label
	"label"		: _("Netmask"),
        "handle_events" : [ "ValueChanged" ],
        "validate_type" : `function,
        "validate_function": ValidateNetwork,
        "valid_chars"   : IP::ValidChars4 + IP::ValidChars6,
	// help text
	"help"		: _("<p>netmask help</p>"),
	"init"		: InitNetwork,
	"store"		: StoreNetwork,
	"handle"	: HandleNetwork,
        "opt"           : [ `notify ],
    ],
    "broadcast" : $[
	"widget"	: `textentry,
	"label"		: _("Broadcast"),
        "valid_chars"   : IP::ValidChars4 + IP::ValidChars6,
	"help"		: _("<p>broadcast</p>"),
	"init"		: InitNetwork,
	"store"		: StoreNetwork,
	"opt"		: [ `disabled ]
    ],
    "add_bridge" : $[
	"widget"	: `checkbox,
	// checkbox label
	"label"		: _("Add Bridge"),
	// help text
	"help"		: _("<p>add bridge</p>"),
	"init"		: InitCheckBox,
	"store"		: StoreNetwork,
	"handle"	: HandleNetwork,
    ],
    "ranges_button"	: $[
	"widget"	: `push_button,
	// push button label
	"label"		: _("&Edit Ranges..."),
	"help"		: _("<p>ranges help</p>"),
	"handle"	: HandleRangesButton
    ],
];

// description of tab layouts
map get_tabs_descr () {
    return $[
    "admin" : $[
	// tab header
	"header"	: _("Administration Settings"),
	"contents"	: `HBox (`HSpacing(2), `VBox (
	    `VSpacing (),
            "password",
            "repeat_password",
	    `VStretch ()
	), `HSpacing(2)),
	"widget_names" : [
            "password", "repeat_password"
	],
    ],
    "networks"	: $[
	// tab header
	"header"	: _("Networks"),
	"contents"	: `HBox (`HSpacing(2), `VBox (
	    `VSpacing (),
            "network_select",
	    `Left ("add_bridge"),
	    `VSpacing (0.4),
            `HBox (
              `VBox (
                "use_vlan",
                `Label ("")
              ),
              `HSpacing (2),
              "vlan"
            ),
            "router",
            `HBox (
	      "subnet",
	      "netmask",
	      "broadcast"
            ),
	    `VSpacing (0.4),
            `Right ("ranges_button")
	), `HSpacing (2)),
	"widget_names" : [
            "network_select", "vlan", "router", "subnet", "netmask", "broadcast", "add_bridge",
            "ranges_button", "use_vlan"
	],
    ],
    ];
}

symbol OverviewDialog() {

    networks    = Crowbar::networks;
    users       = Crowbar::users;

    widget_description["tab"] = CWMTab::CreateWidget($[
	"tab_order"	: [ "admin", "networks" ],
	"tabs"		: get_tabs_descr (),
	"widget_descr"	: widget_description,
	"initial_tab"	: "admin",
    ]);

    Wizard::SetContentsButtons("", `VBox (), HELPS["overview"]:"",
        Label::BackButton(), Label::FinishButton());

    symbol ret = CWM::ShowAndRun ($[
	"widget_names"		: [
	    "tab"
	],
	"widget_descr"		: widget_description,
	"contents"		: `VBox ("tab"),
	// default dialog caption
        "caption"               : _("Crowbar Configuration Overview"),
	"abort_button"		: Stage::cont () ? Label::AbortButton () : nil,
	"next_button"		: Stage::cont () ? Label::NextButton () : Label::OKButton (),
	"back_button"		: Stage::cont () ? Label::BackButton () : Label::CancelButton (),
    ]);
    if (ret == `next)
    {
      Crowbar::networks = networks;
      Crowbar::users    = users;
    }
    return ret;
}

/* EOF */
}
