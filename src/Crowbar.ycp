/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/Crowbar.ycp
 * Package:	Configuration of crowbar
 * Summary:	Crowbar settings, input and output functions
 * Authors:	Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id: Crowbar.ycp 41350 2007-10-10 16:59:00Z dfiser $
 *
 * Representation of the configuration of crowbar.
 * Input and output routines.
 */

{

module "Crowbar";
textdomain "crowbar";

import "FileUtils";
import "JSON";
import "Progress";
import "Report";
import "Message";

/**
 * Path to the file with JSON data
 */
global string file_name = "/tmp/bc-template-network.json";

/**
 * map of configuration data
 */
global map crowbar      = $[];

/**
 * networks subset of global configuration map
 */
global map networks     = $[];

/**
 * Prototypes
 */
global boolean Modified();

/**
 * Data was modified?
 */
boolean modified = false;

/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
    return modified;
}

/**
 * Mark as modified, for Autoyast.
 */
global void SetModified(boolean value) {
      modified = true;
  }


/**
 * Read all crowbar settings
 * @return true on success
 */
global boolean Read() {

    /* Crowbar read dialog caption */
    string caption = _("Initializing crowbar Configuration");

    integer steps = 2;

    // We do not set help text here, because it was set outside
    Progress::New( caption, " ", steps, [
	    /* Progress stage */
	    _("Read the configuraton"),
	], [
	    /* Progress step */
	    _("Reading the configuration..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    if (!FileUtils::Exists (file_name))
    {
        Report::Error (Message::CannotOpenFile (file_name));
        return false;
    }

    crowbar     = JSON::read (file_name);
    y2internal ("parsed: %1", crowbar);

    networks    = crowbar["attributes","network","networks"]:$[];

    y2milestone ("networks: %1", networks);

    Progress::NextStage();

    modified = false;
    return true;
}

/**
 * Write all crowbar settings
 * @return true on success
 */
global boolean Write() {

    /* Crowbar read dialog caption */
    string caption = _("Saving crowbar Configuration");

    integer steps = 1;

    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/2 */
	    _("Write the settings"),
	], [
	    /* Progress step 1/2 */
	    _("Writing the settings..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    Progress::NextStage();

    return true;
}

/* EOF */
}
